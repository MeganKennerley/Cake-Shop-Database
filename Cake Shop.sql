DROP DATABASE CAKESHOP;

CREATE DATABASE CAKESHOP;

USE CAKESHOP;

/* A business which sell cakes and other sweet goods, also makes customised cakes for celebrations
5 tables = customer info, orders, menu(cake, brownie, cookie), custom cakes info/booking, recipes 
list of everything i want to incude and draw out tables that make sense
organise where we wont have duplicate data 
dietry requirements in own table as dont want to have lists in tables 
group into tables that make sense together 
users linked to workout day which is then linked to the different work out  - will go into individual things 
group them and then find out where they would link
*/

/* menu 
orders
customer info
custom cake booking 
ingridence
allergies 
loyalty card 
*/

/* DATABASE
CUSTOMER
TABLES LINKED - CUSTOMER
	ADDRESS
    ORDERS 
	CUSTOM CAKE BOOKING
    
MENU
TABLES LINKED - MENU
	INGREDIENCE
    ALLERGIES
*/

CREATE TABLE CUSTOMER (
	CUSTOMER_ID INT NOT NULL,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    ADDRESS_ID INT NOT NULL,
    EMAIL_ADDRESS VARCHAR(50) NOT NULL,
    DIETARY_ID INT NOT NULL,
    PRIMARY KEY (CUSTOMER_ID)
);

CREATE TABLE ADDRESS (
	ADDRESS_ID INT NOT NULL,
    BUILDING_NUMBER VARCHAR(50) NOT NULL,
    STREET VARCHAR(50) NOT NULL,
    TOWN VARCHAR(50) NOT NULL,
    POST_CODE VARCHAR(50) NOT NULL,
    COUNTRY VARCHAR(50) NOT NULL,
	PRIMARY KEY (ADDRESS_ID),
    CONSTRAINT FK_ADDRESS FOREIGN KEY (ADDRESS_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
);
    
CREATE TABLE ORDERS (
	ORDER_ID INT NOT NULL,
    CUSTOMER_ID INT NOT NULL, 
    MENU_ID INT NOT NULL,
    AMOUNT INT NOT NULL,
    PRICE FLOAT(2) NOT NULL,
    PRIMARY KEY (ORDER_ID),
    CONSTRAINT FK_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
);

CREATE TABLE CUSTOM_CAKE (
	CUSTOM_CAKE_ID INT NOT NULL, 
    CUSTOMER_ID INT NOT NULL,
    DATE_FOR DATE NOT NULL,
    PRODUCT_INFO VARCHAR(200) NOT NULL,
    PRICE FLOAT(2) NOT NULL, 
    PRIMARY KEY (CUSTOM_CAKE_ID),
    CONSTRAINT FK_CUSTOMER_CUSTOM FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
);

CREATE TABLE DIETARY (
	DIETARY_ID INT NOT NULL, 
    ALLERGIES BOOL NOT NULL,
    ALLERGY_LIST VARCHAR(200),
    DIETARY_REQUIREMENTS BOOL NOT NULL,
    DIETARY_LIST VARCHAR(200),
    PRIMARY KEY (DIETARY_ID),
    CONSTRAINT FK_DIETARY_C FOREIGN KEY (DIETARY_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
);

CREATE TABLE MENU (
	MENU_ID INT NOT NULL,
	PRODUCT_NAME VARCHAR(50) NOT NULL,
	INGREDIENCE_LIST VARCHAR(200) NOT NULL,
	SUMMARY VARCHAR(200) NOT NULL, 
	PRIMARY KEY (MENU_ID),
    CONSTRAINT FK_MENU FOREIGN KEY (MENU_ID) REFERENCES ORDERS(ORDER_ID)
);

-- Creating info to go into tables 

INSERT INTO CUSTOMER
	(CUSTOMER_ID, FIRST_NAME, LAST_NAME, ADDRESS_ID, EMAIL_ADDRESS, DIETARY_ID)
VALUES
	(1, 'MICHAEL', 'GOODE', 1, 'MICHAEL123@GMAIL.COM', 1),
    (2, 'JANE', 'SMITH', 2, 'JANE123@GMAIL.COM', 2),
    (3, 'SARAH', 'JONES', 3, 'SARAHJ@GMAIL.COM', 3),
    (4, 'BOB', 'MILLER', 4, 'BOBM@HOTMAIL.COM', 4),
    (5, 'OLIVIA', 'DAVIS', 5, 'ODAVIS@HOTMAIL.COM', 5);
    
INSERT INTO ADDRESS
	(ADDRESS_ID, BUILDING_NUMBER, STREET, TOWN, POST_CODE, COUNTRY)
VALUES
	(1, '2', 'LION STREET', 'SHEFFIELD', 'SA70 7TE', 'UK'),
	(2, '18', 'BRUE CLOSE', 'BRUTON', 'BA10 0HY', 'UK'),
	(3, '10', 'HALL STREET', 'BIRMINGHAM', 'B18 6BN', 'UK'),
	(4, '11', 'WARWICK ROAD', 'LONDON', 'L1B 5NA', 'UK'),
	(5, '102', 'PENDALE AVENUE', 'PRESTON', 'PR5 62S', 'UK');
        
INSERT INTO ORDERS
	(ORDER_ID, CUSTOMER_ID, MENU_ID, AMOUNT, PRICE)
VALUES
	(1, 1, 5, 5, 6.20),
	(2, 2, 3, 2, 3.60),
	(3, 3, 2, 4, 7.10),
	(4, 4, 1, 8, 15.80),
	(5, 5, 2, 1, 2.30);
        
INSERT INTO CUSTOM_CAKE
	(CUSTOM_CAKE_ID, CUSTOMER_ID, DATE_FOR, PRODUCT_INFO, PRICE)
VALUES
	(1, 1, '2022-09-25', 'CHOCOLATE BIRTHDAY CAKE', 25.70),
    (2, 4, '2022-08-20', 'CHILDRENS ANIMAL BIRTHDAY CAKE', 30.00);
    
INSERT INTO DIETARY
	(DIETARY_ID, ALLERGIES, ALLERGY_LIST, DIETARY_REQUIREMENTS, DIETARY_LIST)
VALUES
	(1, TRUE, 'DAIRY', FALSE, NULL),
    (2, FALSE, NULL, FALSE, NULL),
    (3, FALSE, NULL, TRUE, 'VEGAN'),
    (4, FALSE, NULL, FALSE, NULL),
    (5, FALSE, NULL, FALSE, NULL);

INSERT INTO MENU
	(MENU_ID, PRODUCT_NAME, INGREDIENCE_LIST, SUMMARY)
VALUES
	(1, 'VEGAN CHOCOLATE BROWNIE', 'BUTTER, SUGAR, FLOUR, COCOA POWDER, CHOCOLATE CHIPS', 'RICH AND FUDGY VEGAN BROWNIES'),
    (2, 'CHOCOLATE CHIPS COOKIES', 'BUTTER, SUGAR, FLOUR, EGGS, CHOCOLATE CHUNKS', 'CHEWEY CHOCLATE CHIP COOKIES'),
    (3, 'CHERRY BAKEWELL', 'PASTRY, ALMOST PASTE, CHERRY JAM, ICING', 'LIGHT PASTRY FILLED WITH A LAYER OF JAM'),
    (4, 'VANILLA CUPCAKE', 'BUTTER, SUGAR, EGGS, VANILLA, FLOUR', 'LIGHT AND FLUFFY CUPCAKES'),
    (5, 'CHOCOLATE MUFFIN', 'BUTTER, SUGAR, EGGS, COCOA POWDER, FLOUR, CHOCOLATE CHIPS', 'DENSE AND CHOCOLATEY CHOCOLATE MUFFINS');

/* Using any type of the joins create a view that combines multiple tables in a logical way
DONE -- Finding the customers from London or Sheffield */

DROP VIEW IF EXISTS NAME_CITY;
CREATE VIEW NAME_CITY AS
SELECT FIRST_NAME,
LAST_NAME,
TOWN
FROM CUSTOMER
INNER JOIN ADDRESS ON CUSTOMER.ADDRESS_ID = ADDRESS.ADDRESS_ID
WHERE TOWN = 'LONDON' OR TOWN = 'SHEFFIELD';

SELECT * FROM NAME_CITY;

/* In your database, create a stored function that can be applied to a query in your DB
DONE -- Checking if the customer has ordered more than 5 things, if so they will get a discount */

DROP FUNCTION IF EXISTS REWARD

DELIMITER //

CREATE FUNCTION REWARD(AMOUNT INT)
RETURNS VARCHAR(100)
DETERMINISTIC

BEGIN
	DECLARE REWARD VARCHAR(20);
    IF AMOUNT >= 5 THEN
		SET REWARD = 'YES';
    ELSE SET REWARD = 'NO';
    END IF;
    RETURN REWARD;
END
//

DELIMITER ;

SELECT CUSTOMER_ID,
AMOUNT,
REWARD(AMOUNT) AS 'REWARD_GIVEN'
FROM ORDERS;
    
/*Prepare an example query with a subquery to demonstrate how to extract data from your DB for analysis 
DONE - Finding which customer is vegan */
    
SELECT FIRST_NAME, DIETARY_ID
FROM CUSTOMER
WHERE DIETARY_ID IN 
	(SELECT DIETARY_ID FROM DIETARY WHERE DIETARY_LIST = 'VEGAN');

-- Create DB diagram where all table relations are shown

/* In your database, create a stored procedure and demonstrate how it runs
DONE - Finding which custom cake has to be done in September */

DROP PROCEDURE GET_CUSTOM_CAKE;

DELIMITER //

CREATE PROCEDURE GET_CUSTOM_CAKE()
BEGIN 
	SELECT * FROM CUSTOM_CAKE
    WHERE DATE_FOR BETWEEN '2022-09-01' AND '2022-09-30';
END //

DELIMITER ;

CALL GET_CUSTOM_CAKE();

/* Prepare an example query with group by and having to demonstrate how to extract data from your DB for analysis
DONE -Finding all the bakes that contain eggs */

SELECT MENU_ID, PRODUCT_NAME, INGREDIENCE_LIST 
FROM MENU 
GROUP BY INGREDIENCE_LIST
HAVING INGREDIENCE_LIST LIKE '%EGGS%'; 

